#!/usr/bin/env python3
"""
NXZip Sample Data ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà
4„Å§„ÅÆÈ´òÊÄßËÉΩ„Ç®„É≥„Ç∏„É≥„Çí‰ΩøÁî®„Åó„Å¶sample„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂÆåÂÖ®ÂèØÈÄÜÊÄß„Å®ÊÄßËÉΩ„Çí„ÉÜ„Çπ„Éà
"""

import os
import sys
import subprocess
import hashlib
import time
import json
from datetime import datetime
import tempfile
import shutil
from pathlib import Path

class SampleDataTester:
    def __init__(self):
        self.bin_dir = os.path.dirname(os.path.abspath(__file__))
        self.project_root = os.path.dirname(self.bin_dir)
        self.sample_dir = os.path.join(self.project_root, "NXZip-Python", "sample")
        
        self.results = {
            "test_date": datetime.now().isoformat(),
            "sample_directory": self.sample_dir,
            "engines": {},
            "summary": {
                "total_tests": 0,
                "passed": 0,
                "failed": 0,
                "reversibility_rate": 0.0,
                "total_compression_ratio": 0.0,
                "average_compression_time": 0.0,
                "average_decompression_time": 0.0
            }
        }
        
        # 4„Å§„ÅÆÈ´òÊÄßËÉΩ„Ç®„É≥„Ç∏„É≥„Å®„Åù„ÅÆÂØæÂøú„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        self.engines = {
            "nexus_quantum.py": {
                "name": "ÈáèÂ≠êÂúßÁ∏Æ„Ç®„É≥„Ç∏„É≥",
                "formats": ["png", "jpg", "jpeg"],
                "description": "ÁîªÂÉèÁî®ÈáèÂ≠êÂúßÁ∏Æ„Éª93.8%ÁêÜË´ñÂÄ§ÈÅîÊàêÁéá"
            },
            "nexus_phase8_turbo.py": {
                "name": "AIÂº∑ÂåñÂãïÁîª„Ç®„É≥„Ç∏„É≥", 
                "formats": ["mp4", "avi", "mkv", "mov"],
                "description": "ÂãïÁîªÁî®AIÂº∑Âåñ„Éª40.2%ÂúßÁ∏ÆÁéá"
            },
            "nexus_optimal_balance.py": {
                "name": "ÊßãÈÄ†Á†¥Â£äÂûã„ÉÜ„Ç≠„Çπ„Éà„Ç®„É≥„Ç∏„É≥",
                "formats": ["txt", "json", "xml", "csv"],
                "description": "„ÉÜ„Ç≠„Çπ„ÉàÁî®ÊßãÈÄ†Á†¥Â£äÂûã„Éª99.9%ÂúßÁ∏ÆÁéá"
            },
            "nexus_lightning_fast.py": {
                "name": "Ë∂ÖÈ´òÈÄüÈü≥Â£∞„Ç®„É≥„Ç∏„É≥",
                "formats": ["mp3", "wav", "flac", "aac"],
                "description": "Èü≥Â£∞Áî®Ë∂ÖÈ´òÈÄü„Éª79.1%/100%ÂúßÁ∏ÆÁéá"
            }
        }
        
    def calculate_file_hash(self, file_path):
        """„Éï„Ç°„Ç§„É´„ÅÆSHA256„Éè„ÉÉ„Ç∑„É•„ÇíË®àÁÆó"""
        hash_sha256 = hashlib.sha256()
        try:
            with open(file_path, "rb") as f:
                for chunk in iter(lambda: f.read(8192), b""):
                    hash_sha256.update(chunk)
            return hash_sha256.hexdigest()
        except Exception as e:
            print(f"‚ùå „Éè„ÉÉ„Ç∑„É•Ë®àÁÆó„Ç®„É©„Éº: {e}")
            return None
    
    def get_sample_files(self):
        """sample„Éá„Ç£„É¨„ÇØ„Éà„É™„Åã„ÇâÈÅ©Âàá„Å™„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó"""
        if not os.path.exists(self.sample_dir):
            print(f"‚ùå „Çµ„É≥„Éó„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {self.sample_dir}")
            return {}
        
        sample_files = {}
        
        # Êó¢Â≠ò„ÅÆ.nxz„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñ„Åó„ÄÅ„Ç™„É™„Ç∏„Éä„É´„Éï„Ç°„Ç§„É´„ÅÆ„Åø„ÇíÂèñÂæó
        for file_path in Path(self.sample_dir).rglob("*"):
            if file_path.is_file():
                filename = file_path.name
                file_ext = file_path.suffix[1:].lower()
                
                # .nxz, .7z, .restored.*, .verified.*„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñ
                if (not filename.endswith('.nxz') and 
                    not filename.endswith('.7z') and 
                    not '.restored.' in filename and 
                    not '.verified.' in filename and
                    file_ext in ['png', 'jpg', 'jpeg', 'mp4', 'avi', 'mkv', 'mov', 'mp3', 'wav', 'flac', 'aac', 'txt', 'json', 'xml', 'csv']):
                    
                    # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØÔºàÁ©∫„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñÔºâ
                    if file_path.stat().st_size > 0:
                        sample_files[filename] = str(file_path)
        
        return sample_files
    
    def test_engine_with_sample(self, engine_file, test_file_path, file_format):
        """Âçò‰∏Ä„Ç®„É≥„Ç∏„É≥„Åß„Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´„Çí„ÉÜ„Çπ„Éà"""
        engine_path = os.path.join(self.bin_dir, engine_file)
        engine_info = self.engines[engine_file]
        filename = os.path.basename(test_file_path)
        
        print(f"\nüîç „ÉÜ„Çπ„ÉàÈñãÂßã:")
        print(f"   „Ç®„É≥„Ç∏„É≥: {engine_info['name']} ({engine_file})")
        print(f"   „Éï„Ç°„Ç§„É´: {filename}")
        print(f"   „Éï„Ç©„Éº„Éû„ÉÉ„Éà: {file_format.upper()}")
        
        # „Ç™„É™„Ç∏„Éä„É´„Éï„Ç°„Ç§„É´ÊÉÖÂ†±
        original_hash = self.calculate_file_hash(test_file_path)
        if not original_hash:
            return False, "„Ç™„É™„Ç∏„Éä„É´„Éï„Ç°„Ç§„É´„Éè„ÉÉ„Ç∑„É•Ë®àÁÆóÂ§±Êïó"
        
        original_size = os.path.getsize(test_file_path)
        print(f"   „Ç™„É™„Ç∏„Éä„É´„Çµ„Ç§„Ç∫: {original_size:,} bytes")
        print(f"   „Ç™„É™„Ç∏„Éä„É´„Éè„ÉÉ„Ç∑„É•: {original_hash[:16]}...")
        
        try:
            with tempfile.TemporaryDirectory() as temp_dir:
                # „ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´„Çí‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Ç≥„Éî„Éº
                temp_test_file = os.path.join(temp_dir, filename)
                shutil.copy2(test_file_path, temp_test_file)
                
                # ÂúßÁ∏Æ„ÉÜ„Çπ„Éà
                print(f"   üì¶ ÂúßÁ∏ÆÂá¶ÁêÜ‰∏≠...")
                start_time = time.time()
                
                # „Ç®„É≥„Ç∏„É≥„ÇíÂÆüË°å
                result = subprocess.run([
                    sys.executable, engine_path, temp_test_file
                ], capture_output=True, text=True, cwd=temp_dir, timeout=300)
                
                compress_time = time.time() - start_time
                
                if result.returncode != 0:
                    error_msg = f"ÂúßÁ∏ÆÂ§±Êïó: {result.stderr.strip()}"
                    print(f"   ‚ùå {error_msg}")
                    return False, error_msg
                
                # ÂúßÁ∏Æ„Éï„Ç°„Ç§„É´„ÇíÊé¢„Åô
                compressed_files = []
                
                # temp_dir„ÅßÊ§úÁ¥¢
                for file in os.listdir(temp_dir):
                    if file.endswith('.nxz'):
                        compressed_files.append(os.path.join(temp_dir, file))
                
                # bin_dir„Åß„ÇÇÊ§úÁ¥¢Ôºà„Ç®„É≥„Ç∏„É≥„Åå„Åù„Åì„Å´Âá∫Âäõ„Åô„ÇãÂ†¥ÂêàÔºâ
                for file in os.listdir(self.bin_dir):
                    if file.endswith('.nxz') and filename.replace('.', '_') in file:
                        source_path = os.path.join(self.bin_dir, file)
                        dest_path = os.path.join(temp_dir, file)
                        shutil.move(source_path, dest_path)
                        compressed_files.append(dest_path)
                
                if not compressed_files:
                    error_msg = "ÂúßÁ∏Æ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ"
                    print(f"   ‚ùå {error_msg}")
                    print(f"   temp_dir contents: {os.listdir(temp_dir)}")
                    print(f"   stdout: {result.stdout}")
                    return False, error_msg
                
                compressed_file = compressed_files[0]
                compressed_size = os.path.getsize(compressed_file)
                compression_ratio = (1 - compressed_size / original_size) * 100
                
                print(f"   ‚úÖ ÂúßÁ∏ÆÂÆå‰∫Ü: {compressed_size:,} bytes")
                print(f"   üìä ÂúßÁ∏ÆÁéá: {compression_ratio:.1f}%")
                print(f"   ‚è±Ô∏è ÂúßÁ∏ÆÊôÇÈñì: {compress_time:.3f}Áßí")
                
                # Âæ©ÂÖÉ„ÉÜ„Çπ„Éà
                print(f"   üìÇ Âæ©ÂÖÉÂá¶ÁêÜ‰∏≠...")
                start_time = time.time()
                
                # Áµ±ÂêàÂæ©ÂÖÉ„Ç®„É≥„Ç∏„É≥„Çí‰ΩøÁî®
                unified_decompressor = os.path.join(self.bin_dir, "nxzip_unified_wrapper.py")
                if os.path.exists(unified_decompressor):
                    # Áµ±Âêà„Ç®„É≥„Ç∏„É≥„ÅßÂæ©ÂÖÉ
                    result = subprocess.run([
                        sys.executable, unified_decompressor, compressed_file, "--decompress"
                    ], capture_output=True, text=True, cwd=temp_dir, timeout=300)
                else:
                    # ÂÄãÂà•„Ç®„É≥„Ç∏„É≥„ÅßÂæ©ÂÖÉË©¶Ë°å
                    result = subprocess.run([
                        sys.executable, engine_path, compressed_file, "--decompress"
                    ], capture_output=True, text=True, cwd=temp_dir, timeout=300)
                
                decompress_time = time.time() - start_time
                
                if result.returncode != 0:
                    error_msg = f"Âæ©ÂÖÉÂ§±Êïó: {result.stderr.strip()}"
                    print(f"   ‚ùå {error_msg}")
                    return False, error_msg
                
                # Âæ©ÂÖÉ„Éï„Ç°„Ç§„É´„ÇíÊé¢„Åô
                restored_files = []
                
                # temp_dir„ÅßÂæ©ÂÖÉ„Éï„Ç°„Ç§„É´Ê§úÁ¥¢
                for file in os.listdir(temp_dir):
                    if (not file.endswith('.nxz') and 
                        file != filename and 
                        ('restored' in file.lower() or 'decompressed' in file.lower() or 
                         file.startswith('output_') or file.endswith('_restored'))):
                        full_path = os.path.join(temp_dir, file)
                        if os.path.getsize(full_path) > 0:
                            restored_files.append(full_path)
                
                # bin_dir„Åß„ÇÇÊ§úÁ¥¢
                for file in os.listdir(self.bin_dir):
                    if (('restored' in file.lower() or 'decompressed' in file.lower() or 
                         'output' in file.lower()) and filename.replace('.', '_') in file):
                        source_path = os.path.join(self.bin_dir, file)
                        dest_path = os.path.join(temp_dir, f"restored_{file}")
                        if os.path.exists(source_path):
                            shutil.move(source_path, dest_path)
                            restored_files.append(dest_path)
                
                if not restored_files:
                    error_msg = "Âæ©ÂÖÉ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ"
                    print(f"   ‚ùå {error_msg}")
                    print(f"   temp_dir contents: {os.listdir(temp_dir)}")
                    print(f"   stdout: {result.stdout}")
                    return False, error_msg
                
                # ÊúÄÈÅ©„Å™Âæ©ÂÖÉ„Éï„Ç°„Ç§„É´„ÇíÈÅ∏ÊäûÔºà„Çµ„Ç§„Ç∫„Åå‰∏ÄËá¥„Åô„Çã„ÇÇ„ÅÆ„ÇíÂÑ™ÂÖàÔºâ
                restored_file = restored_files[0]
                for rf in restored_files:
                    if os.path.getsize(rf) == original_size:
                        restored_file = rf
                        break
                
                print(f"   ‚è±Ô∏è Âæ©ÂÖÉÊôÇÈñì: {decompress_time:.3f}Áßí")
                
                # „Éè„ÉÉ„Ç∑„É•ÊØîËºÉ„Å´„Çà„ÇãÂèØÈÄÜÊÄßÊ§úË®º
                restored_hash = self.calculate_file_hash(restored_file)
                restored_size = os.path.getsize(restored_file)
                
                print(f"   Âæ©ÂÖÉ„Çµ„Ç§„Ç∫: {restored_size:,} bytes")
                print(f"   Âæ©ÂÖÉ„Éè„ÉÉ„Ç∑„É•: {restored_hash[:16] if restored_hash else 'None'}...")
                
                # ÂèØÈÄÜÊÄßÂà§ÂÆö
                is_reversible = (restored_hash == original_hash and restored_size == original_size)
                
                if is_reversible:
                    print(f"   ‚úÖ ÂÆåÂÖ®ÂèØÈÄÜÊÄßÁ¢∫Ë™ç: „Éá„Éº„ÇøÂÆåÂÖ®‰∏ÄËá¥")
                    return True, {
                        "compression_ratio": compression_ratio,
                        "compress_time": compress_time,
                        "decompress_time": decompress_time,
                        "original_size": original_size,
                        "compressed_size": compressed_size,
                        "restored_size": restored_size,
                        "total_time": compress_time + decompress_time,
                        "speed_mbps": (original_size / (1024*1024)) / (compress_time + decompress_time) if (compress_time + decompress_time) > 0 else 0
                    }
                else:
                    error_details = []
                    if restored_size != original_size:
                        error_details.append(f"„Çµ„Ç§„Ç∫‰∏ç‰∏ÄËá¥: {original_size} ‚Üí {restored_size}")
                    if restored_hash != original_hash:
                        error_details.append(f"„Éè„ÉÉ„Ç∑„É•‰∏ç‰∏ÄËá¥")
                    
                    error_msg = "ÂèØÈÄÜÊÄßÊ§úË®ºÂ§±Êïó: " + ", ".join(error_details)
                    print(f"   ‚ùå {error_msg}")
                    return False, error_msg
                    
        except subprocess.TimeoutExpired:
            error_msg = "Âá¶ÁêÜ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºà5ÂàÜÔºâ"
            print(f"   ‚ùå {error_msg}")
            return False, error_msg
        except Exception as e:
            error_msg = f"„ÉÜ„Çπ„ÉàÂÆüË°å„Ç®„É©„Éº: {str(e)}"
            print(f"   ‚ùå {error_msg}")
            return False, error_msg
    
    def run_comprehensive_sample_test(self):
        """„Çµ„É≥„Éó„É´„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„ÅüÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„ÉàÂÆüË°å"""
        print("üß™ NXZip Sample Data ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„ÉàÈñãÂßã")
        print("=" * 70)
        print(f"üìÅ „Çµ„É≥„Éó„É´„Éá„Ç£„É¨„ÇØ„Éà„É™: {self.sample_dir}")
        
        # „Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´ÂèñÂæó
        print(f"\nüìù „Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´ÂèéÈõÜ‰∏≠...")
        sample_files = self.get_sample_files()
        
        if not sample_files:
            print("‚ùå „ÉÜ„Çπ„ÉàÂèØËÉΩ„Å™„Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
            return
        
        print(f"   ‚úÖ {len(sample_files)}ÂÄã„ÅÆ„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´„ÇíÁô∫Ë¶ã")
        for filename, filepath in sample_files.items():
            size_mb = os.path.getsize(filepath) / (1024*1024)
            print(f"     - {filename} ({size_mb:.2f} MB)")
        
        # „Ç®„É≥„Ç∏„É≥Âà•„ÉÜ„Çπ„ÉàÂÆüË°å
        total_tests = 0
        passed_tests = 0
        total_compression_ratio = 0
        total_compress_time = 0
        total_decompress_time = 0
        
        for engine_file, engine_info in self.engines.items():
            engine_path = os.path.join(self.bin_dir, engine_file)
            
            if not os.path.exists(engine_path):
                print(f"\n‚ö†Ô∏è  „Ç®„É≥„Ç∏„É≥„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {engine_file}")
                continue
            
            print(f"\nüöÄ {engine_info['name']} ÊÄßËÉΩ„ÉÜ„Çπ„ÉàÈñãÂßã")
            print(f"   „Éï„Ç°„Ç§„É´: {engine_file}")
            print(f"   Ë™¨Êòé: {engine_info['description']}")
            print("-" * 50)
            
            engine_results = {
                "name": engine_info["name"],
                "description": engine_info["description"],
                "supported_formats": engine_info["formats"],
                "tests": {},
                "engine_summary": {
                    "tests_run": 0,
                    "tests_passed": 0,
                    "average_compression_ratio": 0,
                    "average_speed_mbps": 0,
                    "total_processing_time": 0
                }
            }
            
            engine_tests = 0
            engine_passed = 0
            engine_compression_total = 0
            engine_speed_total = 0
            engine_time_total = 0
            
            # „Çµ„É≥„Éó„É´„Éï„Ç°„Ç§„É´„Åß„ÉÜ„Çπ„ÉàÂÆüË°å
            for filename, filepath in sample_files.items():
                file_ext = os.path.splitext(filename)[1][1:].lower()
                
                # „Ç®„É≥„Ç∏„É≥„ÅåÂØæÂøú„Åô„Çã„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                if file_ext not in engine_info["formats"]:
                    continue
                
                total_tests += 1
                engine_tests += 1
                
                success, result = self.test_engine_with_sample(engine_file, filepath, file_ext)
                
                if success:
                    passed_tests += 1
                    engine_passed += 1
                    
                    metrics = result
                    engine_compression_total += metrics["compression_ratio"]
                    engine_speed_total += metrics["speed_mbps"]
                    engine_time_total += metrics["total_time"]
                    total_compression_ratio += metrics["compression_ratio"]
                    total_compress_time += metrics["compress_time"]
                    total_decompress_time += metrics["decompress_time"]
                    
                    engine_results["tests"][filename] = {
                        "status": "PASS",
                        "metrics": metrics
                    }
                else:
                    engine_results["tests"][filename] = {
                        "status": "FAIL",
                        "error": result
                    }
            
            # „Ç®„É≥„Ç∏„É≥Áµ±Ë®àË®àÁÆó
            if engine_tests > 0:
                engine_results["engine_summary"]["tests_run"] = engine_tests
                engine_results["engine_summary"]["tests_passed"] = engine_passed
                engine_results["engine_summary"]["success_rate"] = (engine_passed / engine_tests) * 100
                
                if engine_passed > 0:
                    engine_results["engine_summary"]["average_compression_ratio"] = engine_compression_total / engine_passed
                    engine_results["engine_summary"]["average_speed_mbps"] = engine_speed_total / engine_passed
                    engine_results["engine_summary"]["total_processing_time"] = engine_time_total
            
            self.results["engines"][engine_file] = engine_results
        
        # ÂÖ®‰ΩìÁµ±Ë®àË®àÁÆó
        self.results["summary"]["total_tests"] = total_tests
        self.results["summary"]["passed"] = passed_tests
        self.results["summary"]["failed"] = total_tests - passed_tests
        self.results["summary"]["reversibility_rate"] = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        if passed_tests > 0:
            self.results["summary"]["total_compression_ratio"] = total_compression_ratio / passed_tests
            self.results["summary"]["average_compression_time"] = total_compress_time / passed_tests
            self.results["summary"]["average_decompression_time"] = total_decompress_time / passed_tests
        
        # ÁµêÊûúË°®Á§∫
        self.display_comprehensive_results()
        
        # ÁµêÊûú‰øùÂ≠ò
        self.save_test_results()
    
    def display_comprehensive_results(self):
        """ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„ÉàÁµêÊûúË°®Á§∫"""
        print("\n" + "=" * 70)
        print("üèÜ NXZip Sample Data ÂåÖÊã¨ÁöÑ„ÉÜ„Çπ„ÉàÁµêÊûú")
        print("=" * 70)
        
        summary = self.results["summary"]
        print(f"\nüìä Á∑èÂêàÁµêÊûú:")
        print(f"   Á∑è„ÉÜ„Çπ„ÉàÊï∞: {summary['total_tests']}")
        print(f"   ÊàêÂäü: {summary['passed']}")
        print(f"   Â§±Êïó: {summary['failed']}")
        print(f"   ÂèØÈÄÜÊÄßÈÅîÊàêÁéá: {summary['reversibility_rate']:.1f}%")
        print(f"   Âπ≥ÂùáÂúßÁ∏ÆÁéá: {summary['total_compression_ratio']:.1f}%")
        print(f"   Âπ≥ÂùáÂúßÁ∏ÆÊôÇÈñì: {summary['average_compression_time']:.3f}Áßí")
        print(f"   Âπ≥ÂùáÂæ©ÂÖÉÊôÇÈñì: {summary['average_decompression_time']:.3f}Áßí")
        
        # „Ç®„É≥„Ç∏„É≥Âà•Ë©≥Á¥∞ÁµêÊûú
        for engine_file, engine_data in self.results["engines"].items():
            print(f"\nüîß {engine_data['name']} Ë©≥Á¥∞ÁµêÊûú")
            print(f"   „Ç®„É≥„Ç∏„É≥„Éï„Ç°„Ç§„É´: {engine_file}")
            
            summary = engine_data["engine_summary"]
            if summary["tests_run"] > 0:
                print(f"   ÂÆüË°å„ÉÜ„Çπ„ÉàÊï∞: {summary['tests_run']}")
                print(f"   ÊàêÂäü„ÉÜ„Çπ„ÉàÊï∞: {summary['tests_passed']}")
                print(f"   ÊàêÂäüÁéá: {summary.get('success_rate', 0):.1f}%")
                print(f"   Âπ≥ÂùáÂúßÁ∏ÆÁéá: {summary['average_compression_ratio']:.1f}%")
                print(f"   Âπ≥ÂùáÂá¶ÁêÜÈÄüÂ∫¶: {summary['average_speed_mbps']:.2f} MB/s")
                print(f"   Á∑èÂá¶ÁêÜÊôÇÈñì: {summary['total_processing_time']:.3f}Áßí")
                
                print(f"\n   ÂÄãÂà•„Éï„Ç°„Ç§„É´ÁµêÊûú:")
                for filename, test_result in engine_data["tests"].items():
                    status_icon = "‚úÖ" if test_result["status"] == "PASS" else "‚ùå"
                    print(f"     {status_icon} {filename}: {test_result['status']}")
                    
                    if test_result["status"] == "PASS" and "metrics" in test_result:
                        metrics = test_result["metrics"]
                        print(f"        ÂúßÁ∏ÆÁéá: {metrics['compression_ratio']:.1f}% | "
                              f"ÈÄüÂ∫¶: {metrics['speed_mbps']:.2f} MB/s | "
                              f"ÊôÇÈñì: {metrics['total_time']:.3f}s")
            else:
                print("   ÂØæÂøú„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆ„ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´„Å™„Åó")
        
        # ÊúÄÁµÇÂà§ÂÆö
        print(f"\nüéØ ÊúÄÁµÇË©ï‰æ°:")
        if summary['reversibility_rate'] == 100.0:
            print(f"üéâ ÂÆåÂÖ®ÂèØÈÄÜÊÄßÈÅîÊàê: „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÊàêÂäüÔºÅ")
            print(f"üíé ÂìÅË≥™‰øùË®º: NXZip„ÅØÂÆåÂÖ®„Å™ÂèØÈÄÜÊÄß„ÇíÂÆüÁèæ")
        elif summary['reversibility_rate'] >= 95.0:
            print(f"üåü ÂÑ™ÁßÄ„Å™ÂèØÈÄÜÊÄß: {summary['reversibility_rate']:.1f}%„ÅÆÈ´ò„ÅÑÊàêÂäüÁéá")
        elif summary['reversibility_rate'] >= 80.0:
            print(f"‚ú® ËâØÂ•Ω„Å™ÂèØÈÄÜÊÄß: {summary['reversibility_rate']:.1f}%„ÅÆÊàêÂäüÁéá")
        else:
            print(f"‚ö†Ô∏è  ÊîπÂñÑ„ÅÆ‰ΩôÂú∞: {summary['reversibility_rate']:.1f}%„ÅÆÊàêÂäüÁéá")
        
        if summary['total_compression_ratio'] > 0:
            print(f"üìà ÂúßÁ∏ÆÊÄßËÉΩ: Âπ≥Âùá{summary['total_compression_ratio']:.1f}%„ÅÆÂúßÁ∏ÆÁéá„ÇíÈÅîÊàê")
    
    def save_test_results(self):
        """„ÉÜ„Çπ„ÉàÁµêÊûú„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = os.path.join(self.bin_dir, f"sample_data_test_report_{timestamp}.json")
        
        try:
            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(self.results, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ „ÉÜ„Çπ„ÉàÁµêÊûú‰øùÂ≠ò: {output_file}")
        except Exception as e:
            print(f"\n‚ùå ÁµêÊûú‰øùÂ≠ò„Ç®„É©„Éº: {e}")

def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    tester = SampleDataTester()
    tester.run_comprehensive_sample_test()

if __name__ == "__main__":
    main()
